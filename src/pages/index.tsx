import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { signIn, signOut, useSession } from "next-auth/react";
import styles from "./index.module.css";
import { atom, useAtom } from "jotai";

import { HexAlphaColorPicker, HexColorInput, HexColorPicker } from "react-colorful";
import { useEffect, useState } from "react";

const Home: NextPage = () => {
	const { data } = trpc.example.hello.useQuery({ text: "from tRPC" });
	const textAtom = atom(data?.greeting);

	return (
		<>
			<Head>
				<title>Psyche Daily</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className={styles.containerOuter}>
				<div className={styles.containerInner}>
					<h1 className={styles.title}></h1>
					<h3 className={styles.subtitle}>Psyche Daily product page</h3>
					<div className={styles.cardGrid}>download link to app</div>
					<div className={styles.helloFrom}>
						TRPC response: {data ? <p>{data.greeting}</p> : <p>Loading...</p>}
					</div>
					<AuthShowcase />
				</div>
			</div>
		</>
	);
};

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

	const { data: sessionData } = useSession();

	return (
		<div className={styles.authShowcase}>
			{sessionData && <p>Logged in as {sessionData?.user?.name}</p>}
			{secretMessage && <p>{secretMessage}</p>}
			<button
				className={styles.signInButton}
				onClick={sessionData ? () => signOut() : () => signIn()}
			>
				{sessionData ? "Sign out" : "Sign in"}
			</button>
			<TechnologyCard />
		</div>
	);
};

const TechnologyCard = () => {
	const [color, setColor] = useState("#FFFFFF");
	const [opacityPercentage, setOpacityPercentage] = useState(100);

	useEffect(() => {
		let hexWithoutPond = color.replace(/#/g, "");
		if (hexWithoutPond.length === 8) {
			let y = hexWithoutPond[6] as string;
			let z = hexWithoutPond[7] as string;
			let q = y.concat(z);

			let x = parseInt(q, 16);
			let max = 255;

			setOpacityPercentage(Math.floor(Math.round((x / max) * 100)));
		} else {
			setOpacityPercentage(100);
		}
	}, [color]);

	const fixThreeDigitEntry = (value: string) => {
		let hexWithoutPond = value.replace(/#/g, "");

		if (hexWithoutPond.length === 3 || hexWithoutPond.length === 4) {
			hexWithoutPond = hexWithoutPond
				.split("")
				.map(function (hex) {
					return hex + hex;
				})
				.join("");
		}

		setColor(`#${hexWithoutPond}`);
	};

	const onColorInputChange = (value: string) => {
		setColor(value);
	};

	return (
		<section className={styles.card} style={{ backgroundColor: `${color}` }}>
			<HexAlphaColorPicker color={color} onChange={setColor} />
			<HexColorInput
				color={color}
				onChange={onColorInputChange}
				onBlur={() => fixThreeDigitEntry(color)}
				placeholder="Type a color"
				prefixed
				alpha
			/>
			<div>{color}</div>
			<div>{opacityPercentage}%</div>
		</section>
	);
};
